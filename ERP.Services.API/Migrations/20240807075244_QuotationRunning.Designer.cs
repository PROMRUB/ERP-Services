// <auto-generated />
using System;
using ERP.Services.API.PromServiceDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ERP.Services.API.Migrations
{
    [DbContext(typeof(PromDbContext))]
    [Migration("20240807075244_QuotationRunning")]
    partial class QuotationRunning
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ERP.Services.API.Entities.ApiKeyEntity", b =>
                {
                    b.Property<Guid?>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("key_id");

                    b.Property<string>("ApiKey")
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<DateTime?>("KeyCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("key_created_date");

                    b.Property<string>("KeyDescription")
                        .HasColumnType("text")
                        .HasColumnName("key_description");

                    b.Property<DateTime?>("KeyExpiredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("key_expired_date");

                    b.Property<string>("OrgId")
                        .HasColumnType("text")
                        .HasColumnName("org_id");

                    b.Property<string>("RolesList")
                        .HasColumnType("text")
                        .HasColumnName("roles_list");

                    b.HasKey("KeyId");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("OrgId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.BankBranchEntity", b =>
                {
                    b.Property<Guid>("BankBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("bank_branch_id");

                    b.Property<string>("BankBranchCode")
                        .HasColumnType("text")
                        .HasColumnName("bank_branch_code");

                    b.Property<string>("BankBranchENName")
                        .HasColumnType("text")
                        .HasColumnName("bank_branch_name_en");

                    b.Property<string>("BankBranchTHName")
                        .HasColumnType("text")
                        .HasColumnName("bank_branch_name_th");

                    b.Property<string>("BankCode")
                        .HasColumnType("text")
                        .HasColumnName("bank_code");

                    b.HasKey("BankBranchId");

                    b.ToTable("BankBranch");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.BankEntity", b =>
                {
                    b.Property<Guid?>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("bank_id");

                    b.Property<string>("BankAbbr")
                        .HasColumnType("text")
                        .HasColumnName("bank_abbr");

                    b.Property<string>("BankCode")
                        .HasColumnType("text")
                        .HasColumnName("bank_code");

                    b.Property<string>("BankENName")
                        .HasColumnType("text")
                        .HasColumnName("bank_name_en");

                    b.Property<string>("BankTHName")
                        .HasColumnType("text")
                        .HasColumnName("bank_name_th");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.BusinessEntity", b =>
                {
                    b.Property<Guid?>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<string>("Alley")
                        .HasColumnType("text")
                        .HasColumnName("alley");

                    b.Property<string>("BrnId")
                        .HasColumnType("text")
                        .HasColumnName("branch_id");

                    b.Property<string>("Building")
                        .HasColumnType("text")
                        .HasColumnName("building");

                    b.Property<DateTime?>("BusinessCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("business_created_date");

                    b.Property<string>("BusinessCustomId")
                        .HasColumnType("text")
                        .HasColumnName("business_custom_id");

                    b.Property<string>("BusinessDescription")
                        .HasColumnType("text")
                        .HasColumnName("business_description");

                    b.Property<string>("BusinessLogo")
                        .HasColumnType("text")
                        .HasColumnName("business_logo");

                    b.Property<string>("BusinessName")
                        .HasColumnType("text")
                        .HasColumnName("business_name");

                    b.Property<string>("BusinessStatus")
                        .HasColumnType("text")
                        .HasColumnName("business_status");

                    b.Property<string>("BusinessType")
                        .HasColumnType("text")
                        .HasColumnName("business_type");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<string>("Floor")
                        .HasColumnType("text")
                        .HasColumnName("floor");

                    b.Property<string>("Moo")
                        .HasColumnType("text")
                        .HasColumnName("moo");

                    b.Property<string>("No")
                        .HasColumnType("text")
                        .HasColumnName("house_no");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("PostCode")
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Province")
                        .HasColumnType("text")
                        .HasColumnName("province");

                    b.Property<string>("Road")
                        .HasColumnType("text")
                        .HasColumnName("road");

                    b.Property<string>("RoomNo")
                        .HasColumnType("text")
                        .HasColumnName("room_no");

                    b.Property<string>("SubDistrict")
                        .HasColumnType("text")
                        .HasColumnName("sub_district");

                    b.Property<string>("TaxId")
                        .HasColumnType("text")
                        .HasColumnName("tax_id");

                    b.Property<string>("Village")
                        .HasColumnType("text")
                        .HasColumnName("village");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("BusinessId");

                    b.HasIndex("BusinessCustomId")
                        .IsUnique();

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.ConditionEntity", b =>
                {
                    b.Property<Guid?>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("condition_id");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<string>("ConditionDescription")
                        .HasColumnType("text")
                        .HasColumnName("condition_description");

                    b.Property<string>("ConditionStatus")
                        .HasColumnType("text")
                        .HasColumnName("condition_status");

                    b.Property<int?>("OrderBy")
                        .HasColumnType("integer")
                        .HasColumnName("order_by");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.HasKey("ConditionId");

                    b.HasIndex("ConditionId", "OrgId", "BusinessId")
                        .IsUnique();

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.CustomerContactEntity", b =>
                {
                    b.Property<Guid?>("CusConId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cus_con_id");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<string>("CusConFirstname")
                        .HasColumnType("text")
                        .HasColumnName("cus_firstname");

                    b.Property<string>("CusConLastname")
                        .HasColumnType("text")
                        .HasColumnName("cus_lastname");

                    b.Property<string>("CusConStatus")
                        .HasColumnType("text")
                        .HasColumnName("cus_con_status");

                    b.Property<Guid?>("CusId")
                        .HasColumnType("uuid")
                        .HasColumnName("cus_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("cus_mail");

                    b.Property<string>("ExtentNo")
                        .HasColumnType("text")
                        .HasColumnName("cus_ext_no");

                    b.Property<string>("MobileNo")
                        .HasColumnType("text")
                        .HasColumnName("cus_mobille_no");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("TelNo")
                        .HasColumnType("text")
                        .HasColumnName("cus_tel_no");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("CusConId");

                    b.HasIndex("CusConId", "OrgId", "BusinessId", "CusId", "UserId")
                        .IsUnique();

                    b.ToTable("CustomerContact");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid?>("CusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cus_id");

                    b.Property<string>("Alley")
                        .HasColumnType("text")
                        .HasColumnName("alley");

                    b.Property<string>("BrnId")
                        .HasColumnType("text")
                        .HasColumnName("branch_id");

                    b.Property<string>("Building")
                        .HasColumnType("text")
                        .HasColumnName("building");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<DateTime?>("CusCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cus_created_date");

                    b.Property<string>("CusCustomId")
                        .HasColumnType("text")
                        .HasColumnName("cus_custom_id");

                    b.Property<string>("CusDescription")
                        .HasColumnType("text")
                        .HasColumnName("cus_description");

                    b.Property<string>("CusName")
                        .HasColumnType("text")
                        .HasColumnName("cus_name");

                    b.Property<string>("CusNameEng")
                        .HasColumnType("text")
                        .HasColumnName("cus_name_eng");

                    b.Property<string>("CusStatus")
                        .HasColumnType("text")
                        .HasColumnName("cus_status");

                    b.Property<string>("CusType")
                        .HasColumnType("text")
                        .HasColumnName("cus_type");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<string>("Floor")
                        .HasColumnType("text")
                        .HasColumnName("floor");

                    b.Property<string>("Moo")
                        .HasColumnType("text")
                        .HasColumnName("moo");

                    b.Property<string>("No")
                        .HasColumnType("text")
                        .HasColumnName("house_no");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("PostCode")
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Province")
                        .HasColumnType("text")
                        .HasColumnName("province");

                    b.Property<string>("Road")
                        .HasColumnType("text")
                        .HasColumnName("road");

                    b.Property<string>("RoomNo")
                        .HasColumnType("text")
                        .HasColumnName("room_no");

                    b.Property<string>("SubDistrict")
                        .HasColumnType("text")
                        .HasColumnName("sub_district");

                    b.Property<string>("TaxId")
                        .HasColumnType("text")
                        .HasColumnName("tax_id");

                    b.Property<string>("Village")
                        .HasColumnType("text")
                        .HasColumnName("village");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("CusId");

                    b.HasIndex("CusId", "CusCustomId", "OrgId", "BusinessId")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.CustomerNumberEntity", b =>
                {
                    b.Property<Guid?>("CusNoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cus_no_id");

                    b.Property<int?>("Allocated")
                        .HasColumnType("integer")
                        .HasColumnName("allocated");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<string>("Character")
                        .HasColumnType("text")
                        .HasColumnName("character");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.HasKey("CusNoId");

                    b.HasIndex("CusNoId")
                        .IsUnique();

                    b.HasIndex("OrgId", "BusinessId", "Character")
                        .IsUnique();

                    b.ToTable("CustomerNo");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.DistrictEntity", b =>
                {
                    b.Property<Guid?>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer")
                        .HasColumnName("district_code");

                    b.Property<string>("DistrictNameEn")
                        .HasColumnType("text")
                        .HasColumnName("district_name_en");

                    b.Property<string>("DistrictNameTh")
                        .HasColumnType("text")
                        .HasColumnName("district_name_th");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<int?>("ProvinceCode")
                        .HasColumnType("integer")
                        .HasColumnName("province_code");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.OrganizationEntity", b =>
                {
                    b.Property<Guid?>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("Alley")
                        .HasColumnType("text")
                        .HasColumnName("alley");

                    b.Property<string>("BrnId")
                        .HasColumnType("text")
                        .HasColumnName("branch_id");

                    b.Property<string>("Building")
                        .HasColumnType("text")
                        .HasColumnName("building");

                    b.Property<string>("BusinessType")
                        .HasColumnType("text")
                        .HasColumnName("business_type");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<string>("Floor")
                        .HasColumnType("text")
                        .HasColumnName("floor");

                    b.Property<string>("Moo")
                        .HasColumnType("text")
                        .HasColumnName("moo");

                    b.Property<string>("No")
                        .HasColumnType("text")
                        .HasColumnName("house_no");

                    b.Property<DateTime?>("OrgCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("org_created_date");

                    b.Property<string>("OrgCustomId")
                        .HasColumnType("text")
                        .HasColumnName("org_custom_id");

                    b.Property<string>("OrgDescription")
                        .HasColumnType("text")
                        .HasColumnName("org_description");

                    b.Property<string>("OrgLogo")
                        .HasColumnType("text")
                        .HasColumnName("org_logo");

                    b.Property<string>("OrgName")
                        .HasColumnType("text")
                        .HasColumnName("org_name");

                    b.Property<string>("OrgStatus")
                        .HasColumnType("text")
                        .HasColumnName("org_status");

                    b.Property<string>("PostCode")
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.Property<string>("Province")
                        .HasColumnType("text")
                        .HasColumnName("province");

                    b.Property<string>("Road")
                        .HasColumnType("text")
                        .HasColumnName("road");

                    b.Property<string>("RoomNo")
                        .HasColumnType("text")
                        .HasColumnName("room_no");

                    b.Property<string>("SubDistrict")
                        .HasColumnType("text")
                        .HasColumnName("sub_district");

                    b.Property<string>("TaxId")
                        .HasColumnType("text")
                        .HasColumnName("tax_id");

                    b.Property<string>("Village")
                        .HasColumnType("text")
                        .HasColumnName("village");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("OrgId");

                    b.HasIndex("OrgCustomId")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.OrganizationNumberEntity", b =>
                {
                    b.Property<Guid?>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<int?>("Allocated")
                        .HasColumnType("integer")
                        .HasColumnName("allocated");

                    b.Property<string>("OrgDate")
                        .HasColumnType("text")
                        .HasColumnName("org_date");

                    b.HasKey("OrgId");

                    b.ToTable("OrganizationNo");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.OrganizationUserEntity", b =>
                {
                    b.Property<Guid?>("OrgUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("org_user_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("FirstNameTh")
                        .HasColumnType("text")
                        .HasColumnName("first_name_th");

                    b.Property<string>("LastnameTh")
                        .HasColumnType("text")
                        .HasColumnName("last_name_th");

                    b.Property<string>("OrgCustomId")
                        .HasColumnType("text")
                        .HasColumnName("org_custom_id");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("TelNo")
                        .HasColumnType("text")
                        .HasColumnName("tel_no");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.HasKey("OrgUserId");

                    b.ToTable("OrganizationsUsers");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.PaymentAccountEntity", b =>
                {
                    b.Property<Guid?>("PaymentAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("payment_account_id");

                    b.Property<Guid?>("AccountBank")
                        .HasColumnType("uuid")
                        .HasColumnName("account_bank_id");

                    b.Property<Guid?>("AccountBrn")
                        .HasColumnType("uuid")
                        .HasColumnName("account_brn_id");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text")
                        .HasColumnName("account_status");

                    b.Property<string>("AccountType")
                        .HasColumnType("text")
                        .HasColumnName("account_type");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("PaymentAccountName")
                        .HasColumnType("text")
                        .HasColumnName("payment_account_name");

                    b.Property<string>("PaymentAccountNo")
                        .HasColumnType("text")
                        .HasColumnName("account_no");

                    b.HasKey("PaymentAccountId");

                    b.HasIndex("PaymentAccountId", "OrgId", "BusinessId")
                        .IsUnique();

                    b.ToTable("PaymentAccounts");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.ProductCategoryEntity", b =>
                {
                    b.Property<Guid>("ProductCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cat_id");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text")
                        .HasColumnName("cat_name");

                    b.Property<string>("CategoryStatus")
                        .HasColumnType("text")
                        .HasColumnName("cat_status");

                    b.Property<string>("CustomCatId")
                        .HasColumnType("text")
                        .HasColumnName("cat_cus_id");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("ParentCatId")
                        .HasColumnType("text")
                        .HasColumnName("parent_cat_id");

                    b.HasKey("ProductCatId");

                    b.HasIndex("ProductCatId", "OrgId", "BusinessId", "CustomCatId")
                        .IsUnique();

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.ProductEntity", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<decimal?>("LwPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("lw_price");

                    b.Property<decimal?>("MSRP")
                        .HasColumnType("numeric")
                        .HasColumnName("msrp");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<Guid?>("ProductCatId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_cat_Id");

                    b.Property<string>("ProductCustomId")
                        .HasColumnType("text")
                        .HasColumnName("product_custom_Id");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductStatus")
                        .HasColumnType("text")
                        .HasColumnName("product_status");

                    b.Property<Guid?>("ProductSubCatId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_sub_cat_Id");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductId", "OrgId", "BusinessId", "ProductCustomId")
                        .IsUnique();

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("cus_id");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("ProjectCustomId")
                        .HasColumnType("text")
                        .HasColumnName("project_cus_Id");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text")
                        .HasColumnName("project_name");

                    b.Property<string>("ProjectStatus")
                        .HasColumnType("text")
                        .HasColumnName("project_status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectId", "BusinessId", "CustomerId", "ProjectCustomId")
                        .IsUnique();

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.ProjectNumberEntity", b =>
                {
                    b.Property<Guid?>("CusNoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cus_no_id");

                    b.Property<int?>("Allocated")
                        .HasColumnType("integer")
                        .HasColumnName("allocated");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("Year")
                        .HasColumnType("text")
                        .HasColumnName("year");

                    b.HasKey("CusNoId");

                    b.HasIndex("CusNoId")
                        .IsUnique();

                    b.HasIndex("OrgId", "BusinessId", "Year")
                        .IsUnique();

                    b.ToTable("ProjectNo");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.ProvinceEntity", b =>
                {
                    b.Property<Guid?>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.Property<int?>("ProvinceCode")
                        .HasColumnType("integer")
                        .HasColumnName("province_code");

                    b.Property<string>("ProvinceNameEn")
                        .HasColumnType("text")
                        .HasColumnName("province_name_en");

                    b.Property<string>("ProvinceNameTh")
                        .HasColumnType("text")
                        .HasColumnName("province_name_th");

                    b.HasKey("ProvinceId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.QuotationEntity", b =>
                {
                    b.Property<Guid?>("QuotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("quotation_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<Guid>("CustomerContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_contact_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("EditTime")
                        .HasColumnType("integer")
                        .HasColumnName("edit_time");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<Guid?>("IssuedById")
                        .HasColumnType("uuid")
                        .HasColumnName("issued_by");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_no");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("QuotationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("quotation_date");

                    b.Property<string>("QuotationNo")
                        .HasColumnType("text")
                        .HasColumnName("quotation_no");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("remark");

                    b.Property<int>("Running")
                        .HasColumnType("integer")
                        .HasColumnName("running");

                    b.Property<Guid?>("SalePersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_person_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("Vat")
                        .HasColumnType("numeric")
                        .HasColumnName("vat");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("QuotationId");

                    b.HasIndex("CustomerContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IssuedById");

                    b.HasIndex("PaymentId");

                    b.HasIndex("QuotationId")
                        .IsUnique();

                    b.HasIndex("SalePersonId");

                    b.ToTable("Quotation");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.QuotationProductEntity", b =>
                {
                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid")
                        .HasColumnName("quotation_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<float>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("QuotationId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuotationId", "ProductId")
                        .IsUnique();

                    b.ToTable("QuotationProduct");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.QuotationProjectEntity", b =>
                {
                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid")
                        .HasColumnName("quotation_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int>("LeadTime")
                        .HasColumnType("integer")
                        .HasColumnName("lead_time");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("PaymentConditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_condition_id");

                    b.Property<string>("Po")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("po");

                    b.Property<int>("Warranty")
                        .HasColumnType("integer")
                        .HasColumnName("warranty");

                    b.HasKey("QuotationId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("QuotationId", "ProjectId")
                        .IsUnique();

                    b.ToTable("QuotationProject");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.RoleEntity", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("RoleCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("role_created_date");

                    b.Property<string>("RoleDefinition")
                        .HasColumnType("text")
                        .HasColumnName("role_definition");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("text")
                        .HasColumnName("role_description");

                    b.Property<string>("RoleLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_level");

                    b.Property<string>("RoleName")
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.SubDistrictEntity", b =>
                {
                    b.Property<Guid?>("SubDistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("sub_district_id");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer")
                        .HasColumnName("district_code");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<int?>("ProvinceCode")
                        .HasColumnType("integer")
                        .HasColumnName("province_code");

                    b.Property<int?>("SubDistrictCode")
                        .HasColumnType("integer")
                        .HasColumnName("sub_district_code");

                    b.Property<string>("SubDistrictNameEn")
                        .HasColumnType("text")
                        .HasColumnName("sub_district_name_en");

                    b.Property<string>("SubDistrictNameTh")
                        .HasColumnType("text")
                        .HasColumnName("sub_district_name_th");

                    b.HasKey("SubDistrictId");

                    b.ToTable("SubDistricts");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.UserBusinessEntity", b =>
                {
                    b.Property<Guid?>("UserBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_business_id");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<Guid?>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("UserBusinessId");

                    b.HasIndex("UserBusinessId")
                        .IsUnique();

                    b.ToTable("UserBusiness");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.UserEntity", b =>
                {
                    b.Property<Guid?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("UserCreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("user_created_date");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasColumnName("user_email");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("UserId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.UserSessionEntity", b =>
                {
                    b.Property<Guid>("UserSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_session_id");

                    b.Property<string>("SessionStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session_status");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("UserSessionId");

                    b.HasIndex("UserSessionId")
                        .IsUnique();

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.QuotationEntity", b =>
                {
                    b.HasOne("ERP.Services.API.Entities.CustomerContactEntity", "CustomerContact")
                        .WithMany()
                        .HasForeignKey("CustomerContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Services.API.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Services.API.Entities.OrganizationUserEntity", "IssuedByUser")
                        .WithMany()
                        .HasForeignKey("IssuedById");

                    b.HasOne("ERP.Services.API.Entities.PaymentAccountEntity", "PaymentAccountEntity")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("ERP.Services.API.Entities.OrganizationUserEntity", "SalePerson")
                        .WithMany()
                        .HasForeignKey("SalePersonId");

                    b.Navigation("Customer");

                    b.Navigation("CustomerContact");

                    b.Navigation("IssuedByUser");

                    b.Navigation("PaymentAccountEntity");

                    b.Navigation("SalePerson");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.QuotationProductEntity", b =>
                {
                    b.HasOne("ERP.Services.API.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Services.API.Entities.QuotationEntity", "Quotation")
                        .WithMany("Products")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.QuotationProjectEntity", b =>
                {
                    b.HasOne("ERP.Services.API.Entities.ProjectEntity", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Services.API.Entities.QuotationEntity", "Quotation")
                        .WithMany("Projects")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("ERP.Services.API.Entities.QuotationEntity", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
